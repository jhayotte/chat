// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/v1/chatd/chatd.proto

/*
Package chatd is a generated protocol buffer package.

It is generated from these files:
	api/v1/chatd/chatd.proto

It has these top-level messages:
	Message
	PublishMessageRequest
	PublishMessageResponse
*/
package chatd

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Message represents the structure of a message exchange over the wire.
type Message struct {
	// Date of the message.
	Date *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=date" json:"date,omitempty"`
	// Username of the writter.
	Writter string `protobuf:"bytes,2,opt,name=writter" json:"writter,omitempty"`
	// Content of the message
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetDate() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *Message) GetWritter() string {
	if m != nil {
		return m.Writter
	}
	return ""
}

func (m *Message) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PublishMessageRequest struct {
	Message *Message `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Room    string   `protobuf:"bytes,2,opt,name=room" json:"room,omitempty"`
}

func (m *PublishMessageRequest) Reset()                    { *m = PublishMessageRequest{} }
func (m *PublishMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishMessageRequest) ProtoMessage()               {}
func (*PublishMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PublishMessageRequest) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *PublishMessageRequest) GetRoom() string {
	if m != nil {
		return m.Room
	}
	return ""
}

type PublishMessageResponse struct {
}

func (m *PublishMessageResponse) Reset()                    { *m = PublishMessageResponse{} }
func (m *PublishMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishMessageResponse) ProtoMessage()               {}
func (*PublishMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Message)(nil), "chat.v1.chatd.Message")
	proto.RegisterType((*PublishMessageRequest)(nil), "chat.v1.chatd.PublishMessageRequest")
	proto.RegisterType((*PublishMessageResponse)(nil), "chat.v1.chatd.PublishMessageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChatService service

type ChatServiceClient interface {
	// PublishMessage
	//
	// Post a message to a specific room. By default to the room "all"
	//
	// Possible business errors:
	//  - ErrInvalidMessage Message Provided is invalid
	//
	//
	PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...grpc.CallOption) (*PublishMessageResponse, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...grpc.CallOption) (*PublishMessageResponse, error) {
	out := new(PublishMessageResponse)
	err := grpc.Invoke(ctx, "/chat.v1.chatd.ChatService/PublishMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatService service

type ChatServiceServer interface {
	// PublishMessage
	//
	// Post a message to a specific room. By default to the room "all"
	//
	// Possible business errors:
	//  - ErrInvalidMessage Message Provided is invalid
	//
	//
	PublishMessage(context.Context, *PublishMessageRequest) (*PublishMessageResponse, error)
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_PublishMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).PublishMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.v1.chatd.ChatService/PublishMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).PublishMessage(ctx, req.(*PublishMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.v1.chatd.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishMessage",
			Handler:    _ChatService_PublishMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/chatd/chatd.proto",
}

func init() { proto.RegisterFile("api/v1/chatd/chatd.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0xe9, 0x9c, 0x0e, 0x33, 0xf4, 0x10, 0x71, 0x84, 0x22, 0x3a, 0x8a, 0xc2, 0xf0, 0x90,
	0xba, 0x79, 0xf3, 0xa8, 0x67, 0x41, 0xaa, 0x27, 0xc1, 0x43, 0xba, 0xbd, 0xb6, 0x81, 0xb5, 0xa9,
	0xcd, 0xdb, 0x7a, 0x90, 0x5d, 0x3c, 0x7b, 0xf3, 0xa3, 0xf9, 0x15, 0xfc, 0x20, 0xd2, 0xfc, 0x41,
	0x36, 0x04, 0x2f, 0x21, 0x4f, 0xde, 0xdf, 0xf3, 0x3e, 0x6f, 0x12, 0xc2, 0x44, 0x25, 0xe3, 0x76,
	0x1a, 0xcf, 0x73, 0x81, 0x0b, 0xbb, 0xf2, 0xaa, 0x56, 0xa8, 0xe8, 0x5e, 0x27, 0x78, 0x3b, 0xe5,
	0xe6, 0x30, 0x3c, 0xca, 0x94, 0xca, 0x96, 0x10, 0x77, 0xbc, 0x28, 0x4b, 0x85, 0x02, 0xa5, 0x2a,
	0xb5, 0x85, 0xc3, 0x13, 0x57, 0x35, 0x2a, 0x6d, 0x9e, 0x63, 0x94, 0x05, 0x68, 0x14, 0x45, 0x65,
	0x81, 0xa8, 0x20, 0x83, 0x5b, 0xd0, 0x5a, 0x64, 0x40, 0x39, 0xe9, 0x2f, 0x04, 0x02, 0x0b, 0xc6,
	0xc1, 0x64, 0x38, 0x0b, 0xb9, 0xb5, 0x72, 0x6f, 0xe5, 0x0f, 0xde, 0x9a, 0x18, 0x8e, 0x32, 0x32,
	0x78, 0xad, 0x25, 0x22, 0xd4, 0xac, 0x37, 0x0e, 0x26, 0xbb, 0x89, 0x97, 0x5d, 0xa5, 0xb0, 0x4d,
	0xd9, 0x96, 0xad, 0x38, 0x19, 0x3d, 0x91, 0xc3, 0xbb, 0x26, 0x5d, 0x4a, 0x9d, 0xbb, 0xd4, 0x04,
	0x5e, 0x1a, 0xd0, 0x48, 0x2f, 0x7e, 0x2d, 0x36, 0x7f, 0xc4, 0xd7, 0xee, 0xc9, 0x3d, 0xef, 0x31,
	0x4a, 0x49, 0xbf, 0x56, 0xaa, 0x70, 0xd9, 0x66, 0x1f, 0x31, 0x32, 0xda, 0x6c, 0xaf, 0x2b, 0x55,
	0x6a, 0x98, 0x7d, 0x04, 0x64, 0x78, 0x93, 0x0b, 0xbc, 0x87, 0xba, 0x95, 0x73, 0xa0, 0x2b, 0xb2,
	0xbf, 0x4e, 0xd2, 0xd3, 0x8d, 0xc0, 0x3f, 0xe7, 0x0c, 0xcf, 0xfe, 0xa1, 0x6c, 0x5c, 0x74, 0xfc,
	0xfe, 0xf5, 0xfd, 0xd9, 0x63, 0xd1, 0x41, 0xf7, 0x87, 0x6e, 0x62, 0x1d, 0xbf, 0x75, 0x43, 0xae,
	0xae, 0x82, 0xf3, 0xeb, 0xc1, 0xe3, 0xb6, 0xf1, 0xa7, 0x3b, 0xe6, 0x79, 0x2f, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xaa, 0x83, 0xcc, 0x02, 0xf0, 0x01, 0x00, 0x00,
}
